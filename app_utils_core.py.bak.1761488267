# app_utils_core.py - versión mínima compatible para Apprutas-Pro
from urllib.parse import urlencode, quote, quote_plus

# Si más adelante añades el cliente real de Google (gmaps), reemplaza este None.
gmaps = None

def suggest_addresses(q: str, min_len: int = 3, max_results: int = 8):
    """
    Sugerencias mínimas para no romper la UI.
    Si hay integración real con Places, reemplaza por esa llamada.
    """
    q = (q or "").strip()
    if len(q) < min_len:
        return []
    # Simulamos: primera opción = lo que el usuario escribió
    return [{"description": q}]

def resolve_selection(label: str, _meta=None):
    """
    Enlaza etiqueta -> address normalizada.
    Si tienes geocoding real, devuelve también lat/lng aquí.
    """
    return {"address": (label or "").strip()}

def _encode_waypoints(waypoints, optimize=True):
    if not waypoints:
        return None
    wps = [wp for wp in waypoints if wp]
    if not wps:
        return None
    if optimize:
        # Sintaxis de Google: optimize:true|wp1|wp2|...
        return "optimize:true|" + "|".join(quote_plus(w) for w in wps)
    return "|".join(quote_plus(w) for w in wps)

def build_gmaps_url(origin: str, destination: str, waypoints=None,
                    mode: str = "driving", avoid: str | None = None, optimize: bool = True):
    """
    URL web de Google Maps Directions (abre navegador). Soporta waypoints + optimize.
    """
    params = {
        "api": 1,
        "origin": origin or "",
        "destination": destination or "",
        "travelmode": mode or "driving",
    }
    if waypoints:
        wps = _encode_waypoints(waypoints, optimize=optimize)
        if wps:
            params["waypoints"] = wps
    if avoid:
        params["avoid"] = avoid  # 'tolls', 'ferries', etc.
    return f"https://www.google.com/maps/dir/?{urlencode(params)}"

def build_gmaps_android_intent_url(origin: str | None = None,
                                   destination: str | None = None,
                                   waypoints=None,
                                   mode: str = "driving",
                                   avoid: str | None = None):
    """
    Intent para abrir la APP nativa de Google Maps.
    Para máxima compatibilidad, priorizamos navegación directa al destino.
    Nota: la app nativa suele ignorar múltiples waypoints si se pasa como 'navigation'.
    """
    # Si hay destino, usamos navegación directa:
    if destination:
        # mode: 'd' (driving), 'w' (walking), 'b' (bicycle), 't' (transit) -> Google usa 'mode=' en web,
        # en intents suele aceptar 'mode=d' como parte de la query, pero 'google.navigation' principalmente usa 'q=' y 'mode='.
        # Lo más fiable es al menos pasar el destino:
        base = f"google.navigation:q={quote(destination)}"
        # (Opcional) Adjunta modo si quieres: &mode=d
        mode_map = {"driving": "d", "walking": "w", "bicycling": "b", "transit": "t"}
        if mode in mode_map:
            base += f"&mode={mode_map[mode]}"
        return base

    # Si no hay destino, pero hay origen+waypoints, caemos a la URL web (mejor que nada)
    return build_gmaps_url(origin or "", destination or "", waypoints=waypoints, mode=mode, avoid=avoid, optimize=True)

def build_waze_url(origin: str, destination: str):
    """
    Waze: lo más compatible es abrir con 'q=destino' y navigate=yes.
    """
    if not destination:
        return None
    return f"https://waze.com/ul?navigate=yes&q={quote(destination)}"

def build_apple_maps_url(origin: str, destination: str):
    """
    Apple Maps: básico (solo iOS/macOS abre nativo).
    """
    if not destination:
        return None
    # dirflg=d -> driving
    return f"http://maps.apple.com/?daddr={quote(destination)}&dirflg=d"

# ===================== PATCH: URL builders con place_id (Google) y 2-puntos (Apple) =====================

def build_gmaps_url(
    origin: str,
    destination: str,
    waypoints=None,
    mode: str = "driving",
    avoid: str | None = None,
    optimize: bool = True,
    origin_place_id: str | None = None,
    destination_place_id: str | None = None,
    waypoint_place_ids: list[str] | None = None,
):
    """
    Genera https://www.google.com/maps/dir/?api=1 preferentemente con place_id:XXXX para
    evitar ambigüedades en origen/destino/waypoints.
    """
    waypoints = waypoints or []
    waypoint_place_ids = waypoint_place_ids or []

    def fmt(addr: str, pid: str | None):
        return f"place_id:{pid}" if pid else addr

    origin_s = fmt(origin, origin_place_id)
    dest_s = fmt(destination, destination_place_id)

    # Combina direcciones y place_ids por índice
    wp_elems = []
    length = max(len(waypoints), len(waypoint_place_ids))
    for i in range(length):
        a = waypoints[i] if i < len(waypoints) else ""
        p = waypoint_place_ids[i] if i < len(waypoint_place_ids) else None
        wp_elems.append(fmt(a, p))
    wp_param = "|".join(wp_elems) if wp_elems else None

    params = {
        "api": "1",
        "origin": origin_s,
        "destination": dest_s,
        "travelmode": mode,
    }
    if wp_param:
        params["waypoints"] = (("optimize:true|" if optimize else "") + wp_param)
    if avoid:
        params["avoid"] = avoid

    import urllib.parse as up
    q = "&".join(f"{k}={up.quote(v)}" for k, v in params.items() if v)
    return f"https://www.google.com/maps/dir/?{q}"


def build_apple_maps_url(origin: str, destination: str):
    """
    Apple Maps web básicamente soporta origen→destino. Ignora paradas intermedias.
    """
    import urllib.parse as up
    base = "https://maps.apple.com/"
    q = f"daddr={up.quote(destination)}&saddr={up.quote(origin)}&dirflg=d"
    return f"{base}?{q}"

# ===================== FIN PATCH =====================
