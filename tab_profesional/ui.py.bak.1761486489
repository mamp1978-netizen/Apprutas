import streamlit as st
from app_utils_core import (
    suggest_addresses,
    resolve_selection,
    build_gmaps_url,
    build_waze_url,
    build_apple_maps_url,
    gmaps,
    build_gmaps_android_intent_url,
)

MAX_POINTS = 10


def initialize_session_state():
    ss = st.session_state
    ss.setdefault("prof_points", [])
    ss.setdefault("prof_selection", "")
    ss.setdefault("prof_mode", "M치s r치pido")
    ss.setdefault("prof_avoid", "Ninguno")
    ss.setdefault("prof_open_target", "Navegador")


def _add_point(value: str):
    ss = st.session_state
    if len(ss["prof_points"]) >= MAX_POINTS:
        st.warning("L칤mite de puntos alcanzado.")
        return
    if not value or len(value.strip()) < 3:
        st.warning("Introduce una direcci칩n v치lida.")
        return
    ss["prof_points"].append(value.strip())
    st.rerun()


def _clear_points():
    st.session_state["prof_points"] = []
    st.rerun()


def _search_and_options_row():
    ss = st.session_state

    col_search, col_mode, col_avoid = st.columns([2.5, 1, 1])

    with col_search:
        with st.form("prof_add_form", clear_on_submit=True):
            term = st.text_input(
                "Buscar direcci칩n...",
                key="prof_text_input",
                label_visibility="collapsed",
                placeholder=f"Escribe la direcci칩n (m칤n. 3 letras, m치x. {MAX_POINTS} puntos)",
            )

            suggestions = []
            if len((term or "").strip()) >= 3:
                try:
                    suggestions = suggest_addresses(term.strip(), min_len=3, max_results=8)
                except Exception:
                    suggestions = []

            selected = None
            if suggestions:
                selected = st.selectbox(
                    "Sugerencias:",
                    [s["description"] for s in suggestions],
                    key="prof_selection",
                    label_visibility="visible",
                )

            c1, c2 = st.columns([1.5, 1])
            submitted = c1.form_submit_button("A침adir", type="primary", use_container_width=True)
            limpiar = c2.form_submit_button("Limpiar", use_container_width=True)

            if submitted:
                value = selected or term
                if value:
                    _add_point(value)
            if limpiar:
                _clear_points()

    with col_mode:
        st.selectbox(
            "Tipo de ruta",
            ["M치s r치pido", "M치s corto"],
            key="prof_mode",
        )

    with col_avoid:
        st.selectbox(
            "Evitar",
            ["Ninguno", "Peajes", "Ferries"],
            key="prof_avoid",
        )

    st.selectbox(
        "Abrir en",
        ["Navegador", "App"],
        key="prof_open_target",
        index=0,
    )


def mostrar_profesional():
    initialize_session_state()
    ss = st.session_state

    st.header("Planificador de rutas profesional")

    _search_and_options_row()

    pts = ss["prof_points"]
    if not pts:
        st.info("Agrega al menos dos puntos para generar la ruta.")
        return

    st.subheader(f"Puntos ({len(pts)}/{MAX_POINTS})")
    for i, p in enumerate(pts):
        st.markdown(f"{i+1}. **{p}**")

    if st.button("Generar ruta profesional", type="primary", use_container_width=True):
        if len(pts) < 2:
            st.warning("Agrega al menos origen y destino.")
            return

        origen, destino = pts[0], pts[-1]
        waypoints = pts[1:-1]

        origen_meta = resolve_selection(origen, None)
        destino_meta = resolve_selection(destino, None)
        waypoints_resolved = [resolve_selection(w, None).get("address", w) for w in waypoints]
        avoid_map = {"Peajes": "tolls", "Ferries": "ferries", "Ninguno": None}

        gmaps_web = build_gmaps_url(
            origin=origen_meta["address"],
            destination=destino_meta["address"],
            waypoints=waypoints_resolved,
            mode="driving",
            avoid=avoid_map.get(ss["prof_avoid"]),
            optimize=True,
        )

        gmaps_app = build_gmaps_android_intent_url(
            origin=origen_meta["address"],
            destination=destino_meta["address"],
            waypoints=waypoints_resolved,
            mode="driving",
            avoid=avoid_map.get(ss["prof_avoid"]),
        )

        waze_url = build_waze_url(origen_meta["address"], destino_meta["address"])
        apple_url = build_apple_maps_url(origen_meta["address"], destino_meta["address"])

        st.success("Ruta generada. Elige c칩mo abrirla 游녢")

        c1, c2, c3, c4 = st.columns(4)
        with c1:
            st.link_button("游님 Maps (App)", gmaps_app)
        with c2:
            st.link_button("游깷 Maps (Web)", gmaps_web)
        with c3:
            st.link_button("游뚱 Waze", waze_url)
        with c4:
            st.link_button("游꼝 Apple", apple_url)
