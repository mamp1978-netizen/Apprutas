# tab_profesional/ui.py
import streamlit as st
from app_utils_core import (
    suggest_addresses,
    resolve_selection,
    build_gmaps_url,                 # parcheado con place_id
    build_waze_url,
    build_apple_maps_url,            # limitado a O‚ÜíD
    build_gmaps_android_intent_url,  # abre app nativa en Android
)

MAX_POINTS = 10  # 1 origen + 8 paradas + 1 destino


# -------------------------------
# Estado
# -------------------------------
def initialize_session_state():
    ss = st.session_state
    ss.setdefault("prof_points", [])
    ss.setdefault("prof_mode", "M√°s r√°pido")
    ss.setdefault("prof_avoid", "Ninguno")
    ss.setdefault("prof_open_target", "Navegador")  # futuro uso


# -------------------------------
# Acciones sobre la lista
# -------------------------------
def _add_point(value: str):
    ss = st.session_state
    if len(ss["prof_points"]) >= MAX_POINTS:
        st.warning("Has alcanzado el m√°ximo de puntos.")
        return
    value = (value or "").strip()
    if not value:
        st.warning("Escribe o selecciona una direcci√≥n v√°lida.")
        return
    ss["prof_points"].append(value)


def _clear_points():
    st.session_state["prof_points"] = []


# -------------------------------
# UI: buscador + opciones (con FORM)
# -------------------------------
def _search_and_options_row():
    ss = st.session_state

    # Estilos de input (mejora contraste)
    st.markdown(
        """
        <style>
        div[data-baseweb="input"] > div {
            background-color: #fafafa !important;
            border-radius: 8px !important;
            border: 1px solid #ccc !important;
        }
        div[data-baseweb="input"]:focus-within > div {
            border-color: #007BFF !important;
            box-shadow: 0 0 6px rgba(0,123,255,0.25) !important;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    col_search, col_mode, col_avoid = st.columns([2.5, 1, 1])

    # -------- FORM: solo submit buttons dentro --------
    with col_search:
        with st.form("prof_add_form", clear_on_submit=True):
            term = st.text_input(
                "Buscar direcci√≥n‚Ä¶",
                key="prof_text_input",
                label_visibility="collapsed",
                placeholder=f"Escribe la direcci√≥n (m√≠n. 3 letras, m√°x. {MAX_POINTS} puntos).",
            )

            suggestions = []
            if len((term or "").strip()) >= 3:
                try:
                    suggestions = suggest_addresses(term.strip(), min_len=3, max_results=8)
                except Exception:
                    suggestions = []

            sel = None
            if suggestions:
                sel = st.selectbox(
                    "Sugerencias:",
                    options=[s["description"] for s in suggestions],
                    key="prof_selection",
                    label_visibility="visible",
                )

            c_add, c_clear = st.columns([1.2, 1])
            submitted_add = c_add.form_submit_button("A√±adir", type="primary", use_container_width=True)
            submitted_clear = c_clear.form_submit_button("Limpiar", use_container_width=True)

        # Manejo de submit (fuera del with del form)
        if submitted_add:
            candidate = st.session_state.get("prof_selection") or term
            _add_point(candidate)
            st.rerun()
        if submitted_clear:
            _clear_points()
            st.rerun()

    # -------- Controles fuera del form --------
    with col_mode:
        st.selectbox(
            "Tipo de ruta",
            ["M√°s r√°pido", "M√°s corto"],
            key="prof_mode",
            label_visibility="visible",
        )
    with col_avoid:
        st.selectbox(
            "Evitar",
            ["Ninguno", "Peajes", "Ferries"],
            key="prof_avoid",
            label_visibility="visible",
        )

    st.selectbox(
        "Abrir en",
        ["Navegador", "App"],
        key="prof_open_target",
        index=0,
    )


# -------------------------------
# UI principal
# -------------------------------
def mostrar_profesional():
    initialize_session_state()
    ss = st.session_state

    st.header("Planificador de rutas")
    _search_and_options_row()

    pts = ss["prof_points"]
    st.subheader(f"Puntos ({len(pts)}/{MAX_POINTS})")
    if pts:
        for i, p in enumerate(pts, start=1):
            st.write(f"{i}. {p}")
    else:
        st.info("A√±ade al menos **origen** y **destino** para generar la ruta.")

    st.markdown("---")
    if st.button("Generar ruta profesional", type="primary", use_container_width=True):
        if len(pts) < 2:
            st.warning("Necesitas al menos origen y destino.")
            return

        origen_label = pts[0]
        destino_label = pts[-1]
        wp_labels = pts[1:-1]

        # Resolver metadatos (address + place_id si lo hay)
        origen_meta = resolve_selection(origen_label, None)
        destino_meta = resolve_selection(destino_label, None)
        waypoints_meta = [resolve_selection(lbl, None) for lbl in wp_labels]

        avoid_map = {"Peajes": "tolls", "Ferries": "ferries", "Ninguno": None}

        # Google Maps (Web) con place_id
        gmaps_web = build_gmaps_url(
            origin=origen_meta.get("address", origen_label),
            destination=destino_meta.get("address", destino_label),
            waypoints=[m.get("address", w) for m, w in zip(waypoints_meta, wp_labels)],
            mode="driving",
            avoid=avoid_map.get(ss["prof_avoid"]),
            optimize=True,
            origin_place_id=origen_meta.get("place_id"),
            destination_place_id=destino_meta.get("place_id"),
            waypoint_place_ids=[m.get("place_id") for m in waypoints_meta],
        )

        # Google Maps (APP Android)
        gmaps_app = build_gmaps_android_intent_url(
            origin=origen_meta.get("address", origen_label),
            destination=destino_meta.get("address", destino_label),
            waypoints=[m.get("address", w) for m, w in zip(waypoints_meta, wp_labels)],
            mode="driving",
            avoid=avoid_map.get(ss["prof_avoid"]),
        )

        # Waze (web)
        waze_url = build_waze_url(
            origen_meta.get("address", origen_label),
            destino_meta.get("address", destino_label),
        )

        # Apple Maps: solo O‚ÜíD; si hay paradas mostramos aviso
        apple_url = build_apple_maps_url(
            origen_meta.get("address", origen_label),
            destino_meta.get("address", destino_label),
        )
        if waypoints_meta:
            st.info("üçé Apple Maps solo admite **origen ‚Üí destino**. Se ignoran paradas intermedias.")

        st.success("Ruta generada. Elige c√≥mo abrirla üëá")
        c1, c2, c3, c4 = st.columns(4)
        with c1:
            st.link_button("üì± Maps (App)", gmaps_app)
        with c2:
            st.link_button("üåê Maps (Web)", gmaps_web)
        with c3:
            st.link_button("üöó Waze", waze_url)
        with c4:
            st.link_button("üçé Apple", apple_url)
